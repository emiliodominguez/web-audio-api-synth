@use "./placeholders";

$control-light-width: 14px;
$control-light-height: 8px;
$control-light-off: #666;
$control-light-on: #ec2045;

#keyboard-controls {
    flex: 1;
    width: 100%;
    height: 100%;
    padding: 10px;
    user-select: none;

    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-gap: 25px;
    overflow: auto;
}

.control {
    position: relative;
    color: #eee;

    label {
        display: block;
        font-size: 12px;
        line-height: 1;
        appearance: none;
    }

    &.bar {
    }

    &.knob {
        $knob-size: 25px;
        $knob-offset: 10px;
        $knob-color: #212023;
        $knob-indicator-size: $knob-size * 0.15;
        $knob-indicator-color: $control-light-on;

        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 4px;

        + .knob {
            margin-top: $knob-size + $knob-offset;
        }

        &::before,
        &::after {
            content: "";
            position: absolute;
            top: ($knob-size * 0.65);
            left: 0;
            width: $knob-size;
            height: $knob-size;
            border-radius: 50%;
        }

        &::before {
            background-image: radial-gradient(circle, $knob-color, lighten($knob-color, 5%));
            box-shadow: 0 0 0 1px darken($knob-color, 5%), 0 0 0 1px darken($knob-color, 10%);
        }

        &::after {
            top: $knob-size * 0.85;
            left: $knob-size * 0.5;
            width: $knob-indicator-size;
            height: $knob-indicator-size;
            margin-left: $knob-indicator-size * -0.5;
            background-color: $knob-indicator-color;
            box-shadow: inset 0 0 $knob-indicator-size lighten($knob-indicator-color, 50%), 0 0 4px 2px lighten($knob-indicator-color, 3%), 0 0 6px 2px $knob-indicator-color,
                0 0 8px darken($knob-indicator-color, 3%);
            // transform-origin: $knob-size * 0.15 $knob-indicator-size;
            // transform: rotate(45deg);
        }

        label {
            flex: 1;
            white-space: pre;
        }

        input {
            @extend %screen;

            width: 100%;
            max-width: calc(100% - #{$knob-size + $knob-offset});
            margin-left: auto;
            padding: 4px;
            border-radius: 4px;
            -moz-appearance: textfield;

            &::-webkit-outer-spin-button,
            &::-webkit-inner-spin-button {
                -webkit-appearance: none;
                margin: 0;
            }

            &:focus {
                outline: none;
            }
        }
    }

    &.radio {
        gap: 8px;
        padding: 5px;
        padding-left: $control-light-width + 8px;

        + .radio {
            margin-top: 5px;
        }

        &:has(input:checked) {
            &::after {
                opacity: 1;
            }
        }

        &::before,
        &::after {
            content: "";
            position: absolute;
            top: 50%;
            left: 0;
            width: $control-light-width;
            height: $control-light-height;
            margin-top: $control-light-height * -0.5;
            border-radius: 2px;
            order: -1;
        }

        &::before {
            background-color: $control-light-off;
        }

        &::after {
            background-image: radial-gradient(circle, $control-light-on, darken($control-light-on, 10%));
            box-shadow: inset 0 0 $control-light-width lighten($control-light-on, 50%), 0 0 4px 2px lighten($control-light-on, 3%), 0 0 8px 2px $control-light-on,
                0 0 12px darken($control-light-on, 3%);
            opacity: 0;
            transition: opacity ease 250ms;
        }

        input {
            position: absolute;
            inset: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            z-index: 1;
            cursor: pointer;
        }
    }
}
